{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"itol-config","text":"<p>To annotate trees in iTOL requres special config files that are time-consuming to create. This python package contains functions to create configuration files automatically from a CSV file.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/jodyphelan/itol-config.git\n</code></pre>"},{"location":"#cli-usage","title":"CLI Usage","text":"<p>This command will automatically create a config file for each column in the specified input csv file.</p> <pre><code>itol-config --input &lt;input.csv&gt; --out &lt;prefix_for_output_files&gt; --id &lt;id_column&gt; --type &lt;annotation_type&gt;\n</code></pre> <p>If you you already have colours in mind, you can specify them with the <code>--colour-conf</code> option. This requires a toml file with the following format:</p> <pre><code>[Column_name_1]\nvalue1 = \"colour\"\nvalue2 = \"colour\"\n\n[Column_name_2]\nvalue1 = \"colour\"\nvalue2 = \"colour\"\n</code></pre>"},{"location":"#use-functions-in-your-own-scripts","title":"Use functions in your own scripts","text":"<p>You can also call the functions in your own code. For example:</p> <pre><code>from itol_config import get_config_writer\nimport random\n\n# generate some example data\ncountries = [\"UK\", \"USA\", \"France\", \"Germany\", \"Spain\"]\ndata = {f'sample_{i}': random.choice(countries)  for i in range(10)}\n\n# create a config writer\nwriter = get_config_writer(\n    config_type=\"colour_strip\", \n    data=data, \n    label=\"Countries\"\n)\noutfile = \"countries_strip_config.txt\"\nwriter.write(outfile)\n</code></pre>"},{"location":"#developers","title":"Developers","text":"<p>The following annotation types are currently supported:</p> <ul> <li>colour_strip</li> <li>text_label</li> </ul> <p>If you want to contribute a new annotation type this package, please clone the repository and create a new branch for your changes. Then create a pull request to merge your changes into the master branch.</p>"},{"location":"#adding-a-new-annotation-type","title":"Adding a new annotation type","text":"<p>Each annotation type is defined as a class in itol_config/interfaces. The class must inherit from the <code>ConfigWriter</code> class and implement the <code>write</code> method. Have a look at the existing classes for examples. Make sure to add your new class to <code>interfaces_types</code> dictionary in the <code>__init__.py</code> file in the same directory.</p>"},{"location":"API/","title":"API","text":""},{"location":"API/#api-documentation","title":"API Documentation","text":"<p>This package contains functions to generate iTOL configuration files.</p>"},{"location":"API/#itol_config.interfaces.base_interface.ConfigWriter","title":"<code>ConfigWriter</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract base class for iTOL configuration file writers.</p> Source code in <code>itol_config/interfaces/base_interface.py</code> <pre><code>class ConfigWriter(ABC):\n    \"\"\"\n    Abstract base class for iTOL configuration file writers.\n    \"\"\"\n    def __init__(self, data: dict, label: str, colour_lookup: Optional[dict] = None):\n        \"\"\"\n        Initialise a ConfigWriter object for a simple dictionary dataset.\n\n        Parameters\n        ----------\n        data : dict\n            Dictionary containing the values to be coloured.\n        label : str\n            Label for the colour strip.\n        colour_lookup : Optional[dict]\n            Dictionary of colours for each unique value in the data.\n            If not provided, it will be generated.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        self.data = data\n        self.label = label\n        if colour_lookup is None:\n            colour_lookup = get_colour_lookup(data.values())\n        self.colour_lookup = colour_lookup\n        self.config = {\n            \"dataset_label\":self.label,\n            \"legend_title\":self.label,\n            \"legend_shapes\":\"\\t\".join([\"1\" for _ in self.colour_lookup]),\n            \"legend_labels\":\"\\t\".join([str(x) for x in self.colour_lookup]),\n            \"legend_colours\":\"\\t\".join([self.colour_lookup[x] for x in self.colour_lookup])\n        }\n\n    @abstractmethod\n    def write(self, outfile: str) -&gt; None:\n        \"\"\"\n        Write the iTOL configuration file.\n\n        Parameters\n        ----------\n        outfile : str\n            Output file name.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"API/#itol_config.interfaces.base_interface.ConfigWriter.__init__","title":"<code>__init__(data, label, colour_lookup=None)</code>","text":"<p>Initialise a ConfigWriter object for a simple dictionary dataset.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary containing the values to be coloured.</p> required <code>label</code> <code>str</code> <p>Label for the colour strip.</p> required <code>colour_lookup</code> <code>Optional[dict]</code> <p>Dictionary of colours for each unique value in the data. If not provided, it will be generated.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>itol_config/interfaces/base_interface.py</code> <pre><code>def __init__(self, data: dict, label: str, colour_lookup: Optional[dict] = None):\n    \"\"\"\n    Initialise a ConfigWriter object for a simple dictionary dataset.\n\n    Parameters\n    ----------\n    data : dict\n        Dictionary containing the values to be coloured.\n    label : str\n        Label for the colour strip.\n    colour_lookup : Optional[dict]\n        Dictionary of colours for each unique value in the data.\n        If not provided, it will be generated.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.data = data\n    self.label = label\n    if colour_lookup is None:\n        colour_lookup = get_colour_lookup(data.values())\n    self.colour_lookup = colour_lookup\n    self.config = {\n        \"dataset_label\":self.label,\n        \"legend_title\":self.label,\n        \"legend_shapes\":\"\\t\".join([\"1\" for _ in self.colour_lookup]),\n        \"legend_labels\":\"\\t\".join([str(x) for x in self.colour_lookup]),\n        \"legend_colours\":\"\\t\".join([self.colour_lookup[x] for x in self.colour_lookup])\n    }\n</code></pre>"},{"location":"API/#itol_config.interfaces.base_interface.ConfigWriter.write","title":"<code>write(outfile)</code>  <code>abstractmethod</code>","text":"<p>Write the iTOL configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>outfile</code> <code>str</code> <p>Output file name.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>itol_config/interfaces/base_interface.py</code> <pre><code>@abstractmethod\ndef write(self, outfile: str) -&gt; None:\n    \"\"\"\n    Write the iTOL configuration file.\n\n    Parameters\n    ----------\n    outfile : str\n        Output file name.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"API/#itol_config.interfaces.base_interface.ConfigWriterMatrix","title":"<code>ConfigWriterMatrix</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Abstract base class for iTOL configuration file writers.</p> Source code in <code>itol_config/interfaces/base_interface.py</code> <pre><code>class ConfigWriterMatrix(ABC):\n    \"\"\"\n    Abstract base class for iTOL configuration file writers.\n    \"\"\"\n    def __init__(self, data: Dict[str,dict], label: str, colour_lookup: Optional[dict] = None):\n        \"\"\"\n        Initialise a ConfigWriter for a matrix-type dataset.\n\n        Parameters\n        ----------\n        data : dict\n            Dictionary containing the values to be coloured.\n        label : str\n            Label for the colour strip.\n        colour_lookup : Optional[dict]\n            Dictionary of colours for each unique value in the data.\n            If not provided, it will be generated.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        self.data = data\n        self.label = label\n        first_row = list(data.values())[0]\n        self.field_labels = list(first_row.keys())\n\n        if colour_lookup is None:\n            colour_lookup = get_colour_lookup(self.field_labels)\n        self.colour_lookup = colour_lookup\n        self.config = {\n            \"dataset_label\":self.label,\n            \"field_labels\":\"\\t\".join([str(x) for x in self.field_labels]),\n            \"field_colours\":\"\\t\".join([self.colour_lookup[x] for x in self.field_labels])\n        }\n\n    @abstractmethod\n    def write(self, outfile: str) -&gt; None:\n        \"\"\"\n        Write the iTOL configuration file.\n\n        Parameters\n        ----------\n        outfile : str\n            Output file name.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"API/#itol_config.interfaces.base_interface.ConfigWriterMatrix.__init__","title":"<code>__init__(data, label, colour_lookup=None)</code>","text":"<p>Initialise a ConfigWriter for a matrix-type dataset.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary containing the values to be coloured.</p> required <code>label</code> <code>str</code> <p>Label for the colour strip.</p> required <code>colour_lookup</code> <code>Optional[dict]</code> <p>Dictionary of colours for each unique value in the data. If not provided, it will be generated.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>itol_config/interfaces/base_interface.py</code> <pre><code>def __init__(self, data: Dict[str,dict], label: str, colour_lookup: Optional[dict] = None):\n    \"\"\"\n    Initialise a ConfigWriter for a matrix-type dataset.\n\n    Parameters\n    ----------\n    data : dict\n        Dictionary containing the values to be coloured.\n    label : str\n        Label for the colour strip.\n    colour_lookup : Optional[dict]\n        Dictionary of colours for each unique value in the data.\n        If not provided, it will be generated.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.data = data\n    self.label = label\n    first_row = list(data.values())[0]\n    self.field_labels = list(first_row.keys())\n\n    if colour_lookup is None:\n        colour_lookup = get_colour_lookup(self.field_labels)\n    self.colour_lookup = colour_lookup\n    self.config = {\n        \"dataset_label\":self.label,\n        \"field_labels\":\"\\t\".join([str(x) for x in self.field_labels]),\n        \"field_colours\":\"\\t\".join([self.colour_lookup[x] for x in self.field_labels])\n    }\n</code></pre>"},{"location":"API/#itol_config.interfaces.base_interface.ConfigWriterMatrix.write","title":"<code>write(outfile)</code>  <code>abstractmethod</code>","text":"<p>Write the iTOL configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>outfile</code> <code>str</code> <p>Output file name.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>itol_config/interfaces/base_interface.py</code> <pre><code>@abstractmethod\ndef write(self, outfile: str) -&gt; None:\n    \"\"\"\n    Write the iTOL configuration file.\n\n    Parameters\n    ----------\n    outfile : str\n        Output file name.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"API/#itol_config.interfaces.colour_strip.ColourStripConfigWriter","title":"<code>ColourStripConfigWriter</code>","text":"<p>             Bases: <code>ConfigWriter</code></p> Source code in <code>itol_config/interfaces/colour_strip.py</code> <pre><code>class ColourStripConfigWriter(ConfigWriter):\n    def write(self, outfile: str) -&gt; None:\n        \"\"\"\n        Parse the data to be coloured.\n\n        Parameters\n        ----------\n        outfile : str\n            Output file name.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        with open(outfile,\"w\") as O:\n            O.write(template % self.config)\n            for index, value in self.data.items():\n                O.write(\"%s\\t%s\\n\" % (index,self.colour_lookup[value]))\n</code></pre>"},{"location":"API/#itol_config.interfaces.colour_strip.ColourStripConfigWriter.write","title":"<code>write(outfile)</code>","text":"<p>Parse the data to be coloured.</p> <p>Parameters:</p> Name Type Description Default <code>outfile</code> <code>str</code> <p>Output file name.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>itol_config/interfaces/colour_strip.py</code> <pre><code>def write(self, outfile: str) -&gt; None:\n    \"\"\"\n    Parse the data to be coloured.\n\n    Parameters\n    ----------\n    outfile : str\n        Output file name.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    with open(outfile,\"w\") as O:\n        O.write(template % self.config)\n        for index, value in self.data.items():\n            O.write(\"%s\\t%s\\n\" % (index,self.colour_lookup[value]))\n</code></pre>"},{"location":"API/#itol_config.interfaces.text_label.TextLabelConfigWriter","title":"<code>TextLabelConfigWriter</code>","text":"<p>             Bases: <code>ConfigWriter</code></p> Source code in <code>itol_config/interfaces/text_label.py</code> <pre><code>class TextLabelConfigWriter(ConfigWriter):\n    def write(self, outfile: str) -&gt; None:\n        \"\"\"\n        Parse the data to be coloured.\n\n        Parameters\n        ----------\n        outfile : str\n            Output file name.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        with open(outfile,\"w\") as O:\n            O.write(template % self.config)\n            for index, value in self.data.items():\n                O.write(\"%s\\t%s\\t-1\\t%s\\tnormal\\t1\\t0\\n\" % (index,self.data[index],self.colour_lookup[value]))\n</code></pre>"},{"location":"API/#itol_config.interfaces.text_label.TextLabelConfigWriter.write","title":"<code>write(outfile)</code>","text":"<p>Parse the data to be coloured.</p> <p>Parameters:</p> Name Type Description Default <code>outfile</code> <code>str</code> <p>Output file name.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>itol_config/interfaces/text_label.py</code> <pre><code>def write(self, outfile: str) -&gt; None:\n    \"\"\"\n    Parse the data to be coloured.\n\n    Parameters\n    ----------\n    outfile : str\n        Output file name.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    with open(outfile,\"w\") as O:\n        O.write(template % self.config)\n        for index, value in self.data.items():\n            O.write(\"%s\\t%s\\t-1\\t%s\\tnormal\\t1\\t0\\n\" % (index,self.data[index],self.colour_lookup[value]))\n</code></pre>"},{"location":"API/#itol_config.interfaces.binary_data.BinaryDataConfigWriter","title":"<code>BinaryDataConfigWriter</code>","text":"<p>             Bases: <code>ConfigWriterMatrix</code></p> Source code in <code>itol_config/interfaces/binary_data.py</code> <pre><code>class BinaryDataConfigWriter(ConfigWriterMatrix):    \n    def __init__(self, data: Dict[str,dict], label: str, colour_lookup: Optional[dict] = None, shape: int = 2,):\n        \"\"\"\n        Initialise a ConfigWriter object.\n\n        Parameters\n        ----------\n        data : dict\n            Dictionary containing the values to be coloured.\n        label : str\n            Label for the colour strip.\n        colour_lookup : Optional[dict]\n            Dictionary of colours for each unique value in the data.\n            If not provided, it will be generated.\n        shape : int\n            Shape of the field.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        super().__init__(data,label,colour_lookup)\n        self.config[\"field_shapes\"] = \"\\t\".join([str(shape) for _ in self.colour_lookup])\n    def write(self, outfile: str) -&gt; None:\n        \"\"\"\n        Write the iTOL configuration file.\n\n        Parameters\n        ----------\n        outfile : str\n            Output file name.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        with open(outfile,\"w\") as O:\n            O.write(template % self.config)\n            for index, values in self.data.items():\n                binary_data = \"\\t\".join([str(x) for x in values.values()])\n                O.write(\"%s\\t%s\\n\" % (index,binary_data))\n</code></pre>"},{"location":"API/#itol_config.interfaces.binary_data.BinaryDataConfigWriter.__init__","title":"<code>__init__(data, label, colour_lookup=None, shape=2)</code>","text":"<p>Initialise a ConfigWriter object.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary containing the values to be coloured.</p> required <code>label</code> <code>str</code> <p>Label for the colour strip.</p> required <code>colour_lookup</code> <code>Optional[dict]</code> <p>Dictionary of colours for each unique value in the data. If not provided, it will be generated.</p> <code>None</code> <code>shape</code> <code>int</code> <p>Shape of the field.</p> <code>2</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>itol_config/interfaces/binary_data.py</code> <pre><code>def __init__(self, data: Dict[str,dict], label: str, colour_lookup: Optional[dict] = None, shape: int = 2,):\n    \"\"\"\n    Initialise a ConfigWriter object.\n\n    Parameters\n    ----------\n    data : dict\n        Dictionary containing the values to be coloured.\n    label : str\n        Label for the colour strip.\n    colour_lookup : Optional[dict]\n        Dictionary of colours for each unique value in the data.\n        If not provided, it will be generated.\n    shape : int\n        Shape of the field.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    super().__init__(data,label,colour_lookup)\n    self.config[\"field_shapes\"] = \"\\t\".join([str(shape) for _ in self.colour_lookup])\n</code></pre>"},{"location":"API/#itol_config.interfaces.binary_data.BinaryDataConfigWriter.write","title":"<code>write(outfile)</code>","text":"<p>Write the iTOL configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>outfile</code> <code>str</code> <p>Output file name.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>itol_config/interfaces/binary_data.py</code> <pre><code>def write(self, outfile: str) -&gt; None:\n    \"\"\"\n    Write the iTOL configuration file.\n\n    Parameters\n    ----------\n    outfile : str\n        Output file name.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    with open(outfile,\"w\") as O:\n        O.write(template % self.config)\n        for index, values in self.data.items():\n            binary_data = \"\\t\".join([str(x) for x in values.values()])\n            O.write(\"%s\\t%s\\n\" % (index,binary_data))\n</code></pre>"}]}